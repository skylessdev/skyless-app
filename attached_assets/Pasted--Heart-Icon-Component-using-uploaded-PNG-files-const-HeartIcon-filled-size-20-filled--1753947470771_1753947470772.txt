// Heart Icon Component using uploaded PNG files
const HeartIcon = ({ filled, size = 20 }: { filled: boolean; size?: number }) => {
return (
<img
src={filled ? “/heart-filled.png” : “/heart.png”}
alt={filled ? “Resonated” : “Resonate”}
width={size}
height={size}
style={{
filter: filled ? “none” : “opacity(0.7)”,
transition: “all 0.2s ease”
}}
/>
);
};

// Dashboard Component
id: number;
content: string;
resonance_count: number;
user_has_resonated: boolean;
time_ago: string;
}

interface DashboardData {
user: {
id: number;
identity_vector: number[];
preferred_mood: string;
};
growth_since_last: number;
whispers: Whisper[];
}

// Dashboard Component
const Dashboard = ({ userId }: { userId: number }) => {
const [dashboardData, setDashboardData] = useState<DashboardData | null>(null);
const [reflection, setReflection] = useState(’’);
const [isSubmitting, setIsSubmitting] = useState(false);

// Load dashboard data
useEffect(() => {
loadDashboard();
}, [userId]);

const loadDashboard = async () => {
try {
const response = await fetch(`/api/dashboard/${userId}`);
const data = await response.json();
setDashboardData(data);
} catch (error) {
console.error(‘Failed to load dashboard:’, error);
}
};

// Submit reflection (automatically becomes whisper)
const submitReflection = async () => {
if (!reflection.trim() || isSubmitting) return;

```
setIsSubmitting(true);
try {
  const response = await fetch('/api/reflections', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      userId,
      content: reflection.trim()
    })
  });
  
  if (response.ok) {
    setReflection('');
    // Reload dashboard to show updated vector and new whispers
    await loadDashboard();
  }
} catch (error) {
  console.error('Failed to submit reflection:', error);
} finally {
  setIsSubmitting(false);
}
```

};

// Toggle resonance on whisper
const toggleResonance = async (whisperId: number) => {
try {
const response = await fetch(`/api/whispers/${whisperId}/resonate`, {
method: ‘POST’,
headers: { ‘Content-Type’: ‘application/json’ },
body: JSON.stringify({ userId })
});

```
  if (response.ok) {
    // Update local state immediately for responsive UI
    setDashboardData(prev => ({
      ...prev!,
      whispers: prev!.whispers.map(whisper =>
        whisper.id === whisperId
          ? {
              ...whisper,
              user_has_resonated: !whisper.user_has_resonated,
              resonance_count: whisper.user_has_resonated 
                ? whisper.resonance_count - 1 
                : whisper.resonance_count + 1
            }
          : whisper
      )
    }));
  }
} catch (error) {
  console.error('Failed to toggle resonance:', error);
}
```

};

if (!dashboardData) {
return <div>Loading your space…</div>;
}

return (
<div className="dashboard">
{/* Welcome */}
<h1>welcome back</h1>

```
  {/* Identity Vector Visualization */}
  <IdentityVector vector={dashboardData.user.identity_vector} />
  
  {/* Growth Indicator */}
  <p>you've grown {dashboardData.growth_since_last}% since last time</p>
  
  {/* Reflection Input */}
  <div className="reflection-input">
    <textarea
      value={reflection}
      onChange={(e) => setReflection(e.target.value)}
      placeholder="what's on your mind?"
      rows={3}
    />
    <button 
      onClick={submitReflection}
      disabled={isSubmitting || !reflection.trim()}
    >
      {isSubmitting ? 'sharing...' : 'submit'}
    </button>
  </div>
  
  {/* Network Whispers */}
  <div className="whispers">
    <p>whispers from the network:</p>
    {dashboardData.whispers.map(whisper => (
      <div key={whisper.id} className="whisper">
        <p>{whisper.content}</p>
        <div className="whisper-meta">
          <button 
            onClick={() => toggleResonance(whisper.id)}
            className={`resonate-btn ${whisper.user_has_resonated ? 'resonated' : ''}`}
          >
            <HeartIcon filled={whisper.user_has_resonated} />
            <span>{whisper.resonance_count}</span>
          </button>
          <span>{whisper.time_ago}</span>
        </div>
      </div>
    ))}
  </div>
</div>
```

);
};

// Identity Vector Visualization Component  
const IdentityVector = ({ vector }: { vector: number[] }) => {
return (
<div className="identity-vector">
{vector.map((value, index) => (
<div
key={index}
className=“vector-dot”
style={{ opacity: value }}
>
{value > 0.5 ? ‘●’ : ‘○’}
</div>
))}
</div>
);
};