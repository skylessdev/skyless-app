# Complete Prerequisites & Setup for skyless.app Landing Page

## Starting from Zero - Full Stack Setup

### 1. **Create New Replit Project**

```
File → Create Repl → Node.js
Name: skyless-landing
```

### 2. **Install All Dependencies**

**Backend Dependencies:**

```bash
npm install express cors helmet morgan compression
npm install sqlite3 better-sqlite3
npm install ethers@^6.8.0
npm install dotenv
```

**Frontend Dependencies:**

```bash
npm install react@18 react-dom@18
npm install vite @vitejs/plugin-react
npm install tailwindcss postcss autoprefixer
npm install framer-motion
```

**Development Dependencies:**

```bash
npm install -D typescript @types/node @types/react @types/react-dom @types/express
npm install -D concurrently nodemon
```

### 3. **Project Structure**

```
skyless-landing/
├── server/
│   ├── index.js          # Express server
│   ├── database.js       # SQLite setup
│   └── routes/
│       ├── auth.js       # Email/wallet endpoints
│       └── users.js      # User management
├── client/
│   ├── src/
│   │   ├── App.tsx       # Main React app
│   │   ├── components/
│   │   │   ├── WalletConnect.tsx
│   │   │   ├── EmailForm.tsx
│   │   │   └── Logo.tsx
│   │   └── hooks/
│   │       └── useWallet.ts
│   ├── index.html
│   └── vite.config.ts
├── package.json
└── .env
```

### 4. **Latest Best Practices for Wallet Integration**

**Modern Stack (2025):**

- **Viem** + **Wagmi v2** (replaces ethers.js)
- **TanStack Query v5** (for state management)
- **ConnectKit** or **RainbowKit** (for wallet UI)

**Install Modern Wallet Stack:**

```bash
npm install viem@^2.0.0 wagmi@^2.0.0 @tanstack/react-query@^5.0.0
npm install @rainbow-me/rainbowkit@^2.0.0
```

### 5. **Environment Variables (.env)**

```env
# Database
DATABASE_URL="./database.sqlite"

# App Config
NODE_ENV="development"
PORT=3000
CORS_ORIGIN="http://localhost:5173"

# Wallet Config (no API keys needed for basic connection)
VITE_PROJECT_ID="your_walletconnect_project_id"
VITE_APP_NAME="skyless"
```

### 6. **Package.json Scripts**

```json
{
  "scripts": {
    "dev": "concurrently \"npm run server\" \"npm run client\"",
    "server": "nodemon server/index.js",
    "client": "cd client && npm run dev",
    "build": "cd client && npm run build",
    "start": "node server/index.js",
    "setup": "npm install && cd client && npm install"
  }
}
```

### 7. **Database Schema (SQLite)**

```sql
-- server/schema.sql
CREATE TABLE IF NOT EXISTS users (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  email TEXT UNIQUE,
  wallet_address TEXT UNIQUE,
  connection_type TEXT CHECK(connection_type IN ('email', 'wallet', 'anonymous')),
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_wallet_address ON users(wallet_address);
CREATE INDEX idx_email ON users(email);
```

### 8. **Modern Wallet Connection Setup**

**Wagmi Config (client/src/wagmi.ts):**

```typescript
import { createConfig } from 'wagmi'
import { mainnet, sepolia } from 'wagmi/chains'
import { createClient } from 'viem'
import { http } from 'viem'

export const config = createConfig({
  chains: [mainnet, sepolia],
  transports: {
    [mainnet.id]: http(),
    [sepolia.id]: http(),
  },
})
```

### 9. **API Endpoints Structure**

```typescript
// server/routes/auth.js
POST /api/connect-wallet    # Store wallet address
POST /api/signup-email     # Store email signup  
GET  /api/user/:address    # Get user by wallet
DELETE /api/disconnect     # Remove user session
```

### 10. **Security Best Practices**

```bash
npm install helmet express-rate-limit express-validator
```

**Security Setup:**

- Helmet for security headers
- Rate limiting on API endpoints
- Input validation on all forms
- CORS properly configured
- No sensitive data in localStorage

### 11. **Deployment Readiness**

```bash
# Add to package.json
"engines": {
  "node": ">=18.0.0",
  "npm": ">=9.0.0"
}
```

### 12. **Final Replit Agent Prompt**

```
Create a full-stack glassmorphic landing page with this exact setup:

[Attach mockup image]

**TECH STACK:**
- Backend: Express.js + SQLite + better-sqlite3
- Frontend: Vite + React 18 + TypeScript + Tailwind
- Wallet: Viem + Wagmi v2 + RainbowKit
- State: TanStack Query v5

**COMPLETE SETUP:**
- Create all files and folders from scratch
- Install all dependencies listed above
- Configure Vite, Tailwind, and TypeScript
- Set up SQLite database with user schema
- Implement modern wallet connection with Wagmi v2
- Create email form with validation
- Build exact glassmorphic UI from mockup

**FUNCTIONALITY:**
- "connect wallet" → Wagmi wallet connection + store address
- "sign in with email" → Form validation + store email
- "explore anonymously" → Direct app access
- Full responsive mobile-first design

Make it production-ready with proper error handling, security, and performance.
```

This gives you a complete, modern, production-ready setup with 2025 best practices!​​​​​​​​​​​​​​​​