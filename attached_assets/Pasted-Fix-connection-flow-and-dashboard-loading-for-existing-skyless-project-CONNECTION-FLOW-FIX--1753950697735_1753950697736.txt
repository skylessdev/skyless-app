Fix connection flow and dashboard loading for existing skyless project:

**CONNECTION FLOW FIX:**
- After successful wallet connection → redirect to /dashboard (not success page)
- After successful email signup → redirect to /dashboard  
- "Explore anonymously" → create anonymous user and redirect to /dashboard
- "Enter" button → check if user exists, if yes go to dashboard, if no scroll to connect section
- Store user_id in localStorage after connection for dashboard access

**BACKEND API UPDATES:**
- Update /api/wallet endpoint to return user_id for dashboard access
- Update /api/email endpoint to return user_id for dashboard access  
- Add /api/anonymous endpoint to create anonymous users
- All connection endpoints should return: { user_id, connection_type, message }

**DASHBOARD LOADING FIX:**
- Change loading screen from blue gradient to pure black (#000000)
- Use white text with serif font (Georgia) 
- Replace "Loading your space..." with elegant dark loading animation
- Add subtle loading spinner and pulsing dots
- Match landing page aesthetic exactly

**DASHBOARD ACCESS:**
- Dashboard should read user_id from localStorage
- If no user_id, redirect back to landing page
- Handle loading states gracefully with dark theme
- Show proper error messages if database fails

**ROUTING:**
- Remove intermediate success/verification pages
- Direct flow: Landing → Connect → Dashboard
- Maintain all existing functionality while fixing navigation

Apply dark theme loading states and ensure proper user flow from connection to dashboard.


// Fix Connection Flow - Redirect to Dashboard After Success

// In your wallet connection success handler:
const handleWalletConnectSuccess = async (walletAddress: string) => {
try {
// Store wallet connection in database
const response = await fetch(’/api/wallet’, {
method: ‘POST’,
headers: { ‘Content-Type’: ‘application/json’ },
body: JSON.stringify({
wallet_address: walletAddress,
connection_type: ‘wallet’
})
});

```
if (response.ok) {
  const userData = await response.json();
  
  // Store user ID for dashboard
  localStorage.setItem('skyless_user_id', userData.user_id);
  
  // Redirect to dashboard instead of success page
  window.location.href = '/dashboard';
}
```

} catch (error) {
console.error(‘Wallet connection failed:’, error);
}
};

// In your email signup success handler:
const handleEmailSignupSuccess = async (email: string) => {
try {
// Store email signup in database
const response = await fetch(’/api/email’, {
method: ‘POST’,
headers: { ‘Content-Type’: ‘application/json’ },
body: JSON.stringify({
email: email,
connection_type: ‘email’
})
});

```
if (response.ok) {
  const userData = await response.json();
  
  // Store user ID for dashboard
  localStorage.setItem('skyless_user_id', userData.user_id);
  
  // Redirect to dashboard
  window.location.href = '/dashboard';
}
```

} catch (error) {
console.error(‘Email signup failed:’, error);
}
};

// For “explore anonymously”:
const handleAnonymousExplore = async () => {
try {
// Create anonymous user
const response = await fetch(’/api/anonymous’, {
method: ‘POST’,
headers: { ‘Content-Type’: ‘application/json’ },
body: JSON.stringify({
connection_type: ‘anonymous’
})
});

```
if (response.ok) {
  const userData = await response.json();
  
  // Store anonymous user ID
  localStorage.setItem('skyless_user_id', userData.user_id);
  
  // Redirect to dashboard
  window.location.href = '/dashboard';
}
```

} catch (error) {
console.error(‘Anonymous access failed:’, error);
}
};

// Update your “enter” button handler:
const handleEnterApp = () => {
const userId = localStorage.getItem(‘skyless_user_id’);

if (userId) {
// User already connected, go to dashboard
window.location.href = ‘/dashboard’;
} else {
// Show connection options (scroll to connect section)
document.getElementById(‘connect’)?.scrollIntoView({ behavior: ‘smooth’ });
}
};



/* Dashboard Loading Screen - Dark Theme */

.dashboard-loading {
background: #000000; /* Match landing page */
color: #ffffff;
min-height: 100vh;
display: flex;
flex-direction: column;
align-items: center;
justify-content: center;
font-family: Georgia, serif;
}

.loading-text {
font-size: 1.2rem;
font-weight: 300;
letter-spacing: 0.5px;
margin-bottom: 2rem;
opacity: 0.8;
}

/* Loading Animation - Subtle and Dark */
.loading-spinner {
width: 40px;
height: 40px;
border: 2px solid rgba(255, 255, 255, 0.1);
border-top: 2px solid rgba(255, 255, 255, 0.6);
border-radius: 50%;
animation: spin 1s linear infinite;
}

@keyframes spin {
0% { transform: rotate(0deg); }
100% { transform: rotate(360deg); }
}

/* Alternative: Pulsing dots */
.loading-dots {
display: flex;
gap: 0.5rem;
margin-top: 1rem;
}

.loading-dot {
width: 8px;
height: 8px;
background: rgba(255, 255, 255, 0.6);
border-radius: 50%;
animation: pulse-dot 1.5s ease-in-out infinite;
}

.loading-dot:nth-child(2) {
animation-delay: 0.2s;
}

.loading-dot:nth-child(3) {
animation-delay: 0.4s;
}

@keyframes pulse-dot {
0%, 100% { opacity: 0.3; transform: scale(1); }
50% { opacity: 1; transform: scale(1.2); }
}

/* Error state styling */
.dashboard-error {
background: #000000;
color: #ffffff;
min-height: 100vh;
display: flex;
flex-direction: column;
align-items: center;
justify-content: center;
font-family: Georgia, serif;
text-align: center;
padding: 2rem;
}

.error-message {
font-size: 1rem;
margin-bottom: 2rem;
opacity: 0.8;
max-width: 300px;
}

.retry-btn {
background: #007AFF;
color: white;
border: none;
padding: 0.75rem 1.5rem;
border-radius: 8px;
font-family: inherit;
cursor: pointer;
transition: all 0.3s ease;
}

.retry-btn:hover {
background: #0056CC;
transform: translateY(-1px);
}


// Add Anonymous User API Endpoint

// POST /api/anonymous - Create anonymous user
app.post(’/api/anonymous’, async (req, res) => {
try {
// Generate anonymous identifier
const anonymousId = `anon_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;

```
// Create anonymous user in database
const user = await db.insert(users).values({
  email: null,
  wallet_address: null,
  connection_type: 'anonymous',
  identity_vector: [0.5, 0.5, 0.5, 0.5], // Default vector
  created_at: new Date()
}).returning();

res.json({
  user_id: user[0].id,
  connection_type: 'anonymous',
  anonymous_id: anonymousId,
  message: 'Anonymous access granted'
});
```

} catch (error) {
console.error(‘Anonymous user creation error:’, error);
res.status(500).json({ error: ‘Failed to create anonymous user’ });
}
});

// Update existing wallet and email endpoints to return user_id
// POST /api/wallet - Update to return user_id
app.post(’/api/wallet’, async (req, res) => {
try {
const { wallet_address } = req.body;

```
if (!wallet_address) {
  return res.status(400).json({ error: 'Wallet address is required' });
}

// Check if user already exists
let user = await db
  .select()
  .from(users)
  .where(eq(users.wallet_address, wallet_address))
  .limit(1);

if (user.length === 0) {
  // Create new user
  const newUser = await db.insert(users).values({
    wallet_address,
    connection_type: 'wallet',
    identity_vector: [0.5, 0.5, 0.5, 0.5],
    created_at: new Date()
  }).returning();
  
  user = newUser;
}

res.json({
  user_id: user[0].id,
  wallet_address: user[0].wallet_address,
  connection_type: 'wallet',
  message: 'Wallet connected successfully'
});
```

} catch (error) {
console.error(‘Wallet connection error:’, error);
res.status(500).json({ error: ‘Failed to connect wallet’ });
}
});

// POST /api/email - Update to return user_id  
app.post(’/api/email’, async (req, res) => {
try {
const { email } = req.body;

```
if (!email || !email.includes('@')) {
  return res.status(400).json({ error: 'Valid email is required' });
}

// Check if user already exists
let user = await db
  .select()
  .from(users)
  .where(eq(users.email, email))
  .limit(1);

if (user.length === 0) {
  // Create new user
  const newUser = await db.insert(users).values({
    email,
    connection_type: 'email',
    identity_vector: [0.5, 0.5, 0.5, 0.5],
    created_at: new Date()
  }).returning();
  
  user = newUser;
}

res.json({
  user_id: user[0].id,
  email: user[0].email,
  connection_type: 'email',
  message: 'Email registered successfully'
});
```

} catch (error) {
console.error(‘Email registration error:’, error);
res.status(500).json({ error: ‘Failed to register email’ });
}
});